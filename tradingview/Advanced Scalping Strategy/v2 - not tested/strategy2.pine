// Advanced Scalping Strategy v2 Based on High-Low Cloud Trend
// Built upon ChartPrime's High-Low Cloud Trend Indicator
// Enhanced with multi-timeframe analysis, order blocks, and adaptive parameters

//@version=6
strategy("Advanced Scalping Strategy v2 [High-Low Cloud Trend]", overlay = true, max_labels_count = 500, 
         default_qty_type = strategy.percent_of_equity, default_qty_value = 100,
         pyramiding = 1, calc_on_order_fills = true)

// --------------------------------------------------------------------------------------------------------------------}
// 𝙐𝙎𝙀𝙍 𝙄𝙉𝙋𝙐𝙏𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Base Settings
lookback_type = input.string("Fixed", "Lookback Period Type", options=["Fixed", "Volatility-Adaptive"], group="Base Settings")
fixed_len = input.int(35, title="Fixed Lookback Period", group="Base Settings") 
min_len = input.int(15, title="Min Lookback (Volatility-Adaptive)", group="Base Settings")
max_len = input.int(50, title="Max Lookback (Volatility-Adaptive)", group="Base Settings")
volatility_period = input.int(20, title="Volatility Period", group="Base Settings")
volatility_smoothing = input.int(5, title="Volatility Smoothing", minval=1, group="Base Settings")

// Mean Reversion Points and Cloud Settings
bool mean_rev = input.bool(true, "Mean Reversion Points", group="Cloud Settings")
bool show_p_v = input.bool(false, "Volume/Price", group="Cloud Settings")

// Colors for trend identification
color_up = input.color(color.aqua, "Bullish Color", group="Cloud Settings")
color_dn = input.color(color.orange, "Bearish Color", group="Cloud Settings")

// Strategy Settings
use_strategy = input.bool(true, "Enable Trading Strategy", group="Strategy Settings")
take_cloud_retest = input.bool(true, "Take Cloud Retest Signals (Priority)", group="Strategy Settings")
take_mean_rev_signals = input.bool(false, "Also Take Mean Reversion Signals", group="Strategy Settings")
take_cross_signals = input.bool(false, "Also Take Cloud Cross Signals", group="Strategy Settings")
only_trade_with_trend = input.bool(true, "Only Trade With Trend Direction", group="Strategy Settings")
pyramiding = input.int(1, "Pyramiding", minval=1, maxval=10, group="Strategy Settings")

// Volume Filter Settings
use_volume_filter = input.bool(true, "Use Volume Filter", group="Volume Filter")
volume_period = input.int(20, "Volume SMA Period", minval=1, group="Volume Filter")
volume_threshold = input.float(1.5, "Volume Threshold (× Average)", minval=0.1, step=0.1, group="Volume Filter")

// RSI Filter Settings
use_rsi_filter = input.bool(true, "Use RSI Filter", group="RSI Filter")
rsi_period = input.int(14, "RSI Period", minval=1, group="RSI Filter")
rsi_oversold = input.int(30, "RSI Oversold Level", minval=1, maxval=100, group="RSI Filter")
rsi_overbought = input.int(70, "RSI Overbought Level", minval=1, maxval=100, group="RSI Filter")
use_dynamic_rsi = input.bool(true, "Use Dynamic RSI Thresholds", group="RSI Filter")
rsi_trend_sensitivity = input.float(5.0, "RSI Trend Sensitivity", minval=0.5, maxval=20.0, step=0.5, group="RSI Filter")

// MACD Filter Settings
use_macd_filter = input.bool(true, "Use MACD Filter", group="MACD Filter")
macd_fast = input.int(12, "MACD Fast Period", minval=1, group="MACD Filter")
macd_slow = input.int(26, "MACD Slow Period", minval=1, group="MACD Filter")
macd_signal = input.int(9, "MACD Signal Period", minval=1, group="MACD Filter")

// Multi-Timeframe Confirmation
use_mtf_confirmation = input.bool(true, "Use Higher Timeframe Confirmation", group="Multi-Timeframe")
mtf_timeframe = input.string("240", "Higher Timeframe", options=["60", "240", "D"], group="Multi-Timeframe")
mtf_lookback = input.int(3, "MTF Trend Lookback Bars", minval=1, group="Multi-Timeframe")
mtf_strict = input.bool(true, "Require Clear MTF Trend Direction", tooltip="If enabled, neutral MTF trend (flat) will block entries", group="Multi-Timeframe")

// Order Block Detection
use_order_blocks = input.bool(true, "Detect Order Blocks", group="Order Blocks")
ob_strength = input.float(1.5, "Order Block Strength Factor", minval=0.5, step=0.1, group="Order Blocks")
ob_min_body_percent = input.float(50.0, "Min OB Body Size (%)", minval=10.0, maxval=90.0, group="Order Blocks")
ob_min_age = input.int(3, "Min OB Age (Bars)", minval=1, group="Order Blocks")
ob_max_age = input.int(50, "Max OB Age (Bars)", minval=10, group="Order Blocks")
ob_lookback = input.int(20, "Order Block Storage Size", minval=5, maxval=100, group="Order Blocks")
highlight_order_blocks = input.bool(true, "Highlight Order Blocks", group="Order Blocks")

// Risk Management Settings
use_sl_tp = input.bool(true, "Use Stop Loss & Take Profit", group="Risk Management")
sl_mult = input.float(1.5, "Stop Loss ATR Multiplier", minval=0.1, step=0.1, group="Risk Management")
tp_mult = input.float(2.0, "Take Profit ATR Multiplier", minval=0.1, step=0.1, group="Risk Management")
atr_period = input.int(14, "ATR Period", minval=1, group="Risk Management")
max_trades_per_day = input.int(5, "Max Trades Per Day", minval=1, group="Risk Management")
use_trailing = input.bool(false, "Use Trailing Exit", group="Risk Management")
trail_trigger = input.float(1.0, "Trailing Trigger (ATR mult)", minval=0.1, step=0.1, group="Risk Management")
trail_step = input.float(0.5, "Trailing Step (ATR mult)", minval=0.1, step=0.1, group="Risk Management")

// Filter Visualization
show_filters = input.bool(true, "Show Filter Indicators", group="Visualization")
show_mtf_info = input.bool(true, "Show Multi-Timeframe Info", group="Visualization")
show_debug_info = input.bool(true, "Show Debug Information", group="Visualization")

// --------------------------------------------------------------------------------------------------------------------}
// 𝙑𝙊𝙇𝘼𝙏𝙄𝙇𝙄𝙏𝙔 & 𝙏𝙍𝙀𝙉𝘿 𝘾𝘼𝙇𝘾𝙐𝙇𝘼𝙏𝙄𝙊𝙉𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Calculate ATR for volatility and risk management
atr_value = ta.atr(atr_period)

// Calculate volatility percentage (ATR relative to price)
vol_percent = 100 * atr_value / close
vol_smooth = ta.sma(vol_percent, volatility_smoothing)

// Get min/max range of volatility for normalization
var float max_observed_vol = vol_smooth
var float min_observed_vol = vol_smooth
max_observed_vol := math.max(max_observed_vol, vol_smooth)
min_observed_vol := math.min(min_observed_vol, vol_smooth)

// Normalize volatility between 0-1 with safeguards
vol_range = math.max(0.001, max_observed_vol - min_observed_vol)
norm_vol = math.max(0, math.min(1, (vol_smooth - min_observed_vol) / vol_range))

// Calculate adaptive lookback length
adapt_len = lookback_type == "Volatility-Adaptive" ? math.round(max_len - (max_len - min_len) * norm_vol) : fixed_len

// Ensure we have valid lookback length
len = math.max(min_len, math.min(max_len, adapt_len))

// --------------------------------------------------------------------------------------------------------------------}
// 𝙈𝙐𝙇𝙏𝙄-𝙏𝙄𝙈𝙀𝙁𝙍𝘼𝙈𝙀 𝘼𝙉𝘼𝙇𝙔𝙎𝙄𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Get trend direction from higher timeframe
mtf_trend() =>
    htf_close = request.security(syminfo.tickerid, mtf_timeframe, close)
    htf_close_prev = request.security(syminfo.tickerid, mtf_timeframe, close[mtf_lookback])
    htf_high = request.security(syminfo.tickerid, mtf_timeframe, high)
    htf_low = request.security(syminfo.tickerid, mtf_timeframe, low)
    
    // Calculate directional movement and strength
    move_percent = 100 * (htf_close - htf_close_prev) / htf_close_prev
    range_percent = 100 * (htf_high - htf_low) / ((htf_high + htf_low) / 2)
    
    // Determine trend based on close comparison with stronger signal threshold
    if math.abs(move_percent) < 0.1 and range_percent < 0.5  // Very flat market
        0
    else if htf_close > htf_close_prev * 1.005  // 0.5% higher 
        1
    else if htf_close < htf_close_prev * 0.995  // 0.5% lower
        -1
    else
        0  // Neutral/ranging

mtf_direction = use_mtf_confirmation ? mtf_trend() : 0

// --------------------------------------------------------------------------------------------------------------------}
// 𝙄𝙉𝘿𝙄𝘾𝘼𝙏𝙊𝙍 𝘾𝘼𝙇𝘾𝙐𝙇𝘼𝙏𝙄𝙊𝙉𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Draw Label Function
drawLabel(_pivot, _style, _color, _textColor, h_l) =>
    src = (h_l ? high[1] : low[1])
    if _pivot
        label.new(bar_index[1], src, str.tostring(src, show_p_v ? format.volume : format.mintick), 
                 style =_style, color =_color, textcolor =_textColor, size = size.small)

// Calculate the highest and lowest over the lookback period
highest  = ta.highest(len)  // Highest high over the lookback period
lowest   = ta.lowest(len)  // Lowest low over the lookback period

// Calculate the highest and lowest over a shorter period (1/4 of the original period)
highest1 = ta.highest(math.max(5, len / 4))  // Highest high over the shortened lookback period
lowest1  = ta.lowest(math.max(5, len / 4))  // Lowest low over the shortened lookback period

// Initialize the 'value' variable using 'var' to retain its value across bars
var float value = na

// Logic to update the 'value' variable based on certain conditions
switch
    low  == lowest  => value := highest  // Set 'value' to 'highest' when the current low equals the lowest
    high == highest => value := lowest  // Set 'value' to 'lowest' when the current high equals the highest
    => value := nz(value[1])           // Retain the previous 'value' if neither condition is met

// Determine the 'band' value based on the relationship between 'close' and 'value'
band  = close > value ? lowest : highest  
band1 = close > value ? lowest1 : highest1  

// Determine the color based on the relationship between 'close' and 'value'
color trend_color = close > value ? color_up : color_dn  // Use 'color_up' for upward trends and 'color_dn' for downward trends

// Trend direction (1 for bullish, -1 for bearish)
trend_direction = close > value ? 1 : -1

// Calculate trend strength (for RSI adaptation)
ema_fast = ta.ema(close, 5)
ema_slow = ta.ema(close, 20)
trend_strength = math.abs(ema_fast - ema_slow) / atr_value

// Pre-compute cross condition
cross_cb = ta.cross(close, band)

// Mean Reversion Conditions
mean_rev_dn = ta.crossunder(high, band1[1]) and band1[1] == high[1] and high != band1 and not cross_cb and band[1] == band
mean_rev_up = ta.crossover(low, band1[1]) and band1[1] == low[1]  and low  != band1 and not cross_cb and band[1] == band

// Cloud Cross Conditions
cloud_cross_up = ta.crossover(close, band) and band == highest
cloud_cross_dn = ta.crossunder(close, band) and band == lowest

// --------------------------------------------------------------------------------------------------------------------}
// 𝙊𝙍𝘿𝙀𝙍 𝘽𝙇𝙊𝘾𝙆 𝘿𝙀𝙏𝙀𝘾𝙏𝙄𝙊𝙉
// --------------------------------------------------------------------------------------------------------------------{
// Calculate body size percentage
candle_body_percent = math.abs(close - open) / (high - low) * 100

// Order Block Detection Logic with enhanced criteria
is_bullish_ob = use_order_blocks ? low[1] - low > (high[1] - low[1]) * ob_strength and candle_body_percent[1] > ob_min_body_percent and high[2] < high[1] and close[1] > open[1] : false

is_bearish_ob = use_order_blocks ? high[1] - high > (high[1] - low[1]) * ob_strength and candle_body_percent[1] > ob_min_body_percent and low[2] > low[1] and close[1] < open[1] : false

// Store order blocks with timestamp and age tracking
var bull_ob_price = array.new_float(ob_lookback, na)
var bear_ob_price = array.new_float(ob_lookback, na)
var bull_ob_bar = array.new_int(ob_lookback, na) // Store bar index instead of time
var bear_ob_bar = array.new_int(ob_lookback, na) // Store bar index instead of time
var bull_ob_age = array.new_int(ob_lookback, 0)
var bear_ob_age = array.new_int(ob_lookback, 0)

// Process new order blocks
if is_bullish_ob
    array.unshift(bull_ob_price, low[1])
    array.unshift(bull_ob_bar, bar_index[1]) // Store bar index
    array.unshift(bull_ob_age, 0)
    if array.size(bull_ob_price) > ob_lookback
        array.pop(bull_ob_price)
        array.pop(bull_ob_bar)
        array.pop(bull_ob_age)

if is_bearish_ob
    array.unshift(bear_ob_price, high[1])
    array.unshift(bear_ob_bar, bar_index[1]) // Store bar index
    array.unshift(bear_ob_age, 0)
    if array.size(bear_ob_price) > ob_lookback
        array.pop(bear_ob_price)
        array.pop(bear_ob_bar)
        array.pop(bear_ob_age)

// Increment age of existing order blocks
for i = 0 to array.size(bull_ob_age) - 1
    if not na(array.get(bull_ob_price, i))
        array.set(bull_ob_age, i, array.get(bull_ob_age, i) + 1)

for i = 0 to array.size(bear_ob_age) - 1
    if not na(array.get(bear_ob_price, i))
        array.set(bear_ob_age, i, array.get(bear_ob_age, i) + 1)

// Check if price is near valid order block
bull_ob_near = false
bear_ob_near = false
ob_distance = atr_value * 0.5

for i = 0 to math.min(array.size(bull_ob_price), ob_lookback) - 1
    if not na(array.get(bull_ob_price, i)) and 
       array.get(bull_ob_age, i) >= ob_min_age and 
       array.get(bull_ob_age, i) <= ob_max_age and
       math.abs(low - array.get(bull_ob_price, i)) < ob_distance
        bull_ob_near := true
        break

for i = 0 to math.min(array.size(bear_ob_price), ob_lookback) - 1
    if not na(array.get(bear_ob_price, i)) and 
       array.get(bear_ob_age, i) >= ob_min_age and 
       array.get(bear_ob_age, i) <= ob_max_age and
       math.abs(high - array.get(bear_ob_price, i)) < ob_distance
        bear_ob_near := true
        break

// --------------------------------------------------------------------------------------------------------------------}
// 𝙁𝙄𝙇𝙏𝙀𝙍𝙎 𝘾𝘼𝙇𝘾𝙐𝙇𝘼𝙏𝙄𝙊𝙉
// --------------------------------------------------------------------------------------------------------------------{
// Volume Filter
volume_sma = ta.sma(volume, volume_period)
volume_condition = volume > volume_sma * volume_threshold

// Dynamic RSI Thresholds based on trend
rsi_value = ta.rsi(close, rsi_period)

// More intelligent dynamic thresholds that respect trend direction
// In strong uptrends: LOWER the overbought threshold to stay in trades longer
// In strong downtrends: RAISE the oversold threshold to avoid catching falling knives
dynamic_adjustment = trend_strength * rsi_trend_sensitivity
dynamic_oversold = trend_direction > 0 ? math.max(15, rsi_oversold - dynamic_adjustment) : math.min(45, rsi_oversold + dynamic_adjustment) // Lower oversold in uptrend / Raise oversold in downtrend
    
dynamic_overbought = trend_direction < 0 ? math.min(85, rsi_overbought + dynamic_adjustment) : math.max(55, rsi_overbought - dynamic_adjustment) // Raise overbought in downtrend / Lower overbought in uptrend

rsi_buy_condition = rsi_value < (use_dynamic_rsi ? dynamic_oversold : rsi_oversold)
rsi_sell_condition = rsi_value > (use_dynamic_rsi ? dynamic_overbought : rsi_overbought)

// MACD Filter
[macd_line, signal_line, _] = ta.macd(close, macd_fast, macd_slow, macd_signal)
macd_buy_condition = macd_line > signal_line
macd_sell_condition = macd_line < signal_line

// MTF Filter - Strict mode requires clear trend direction
mtf_buy_condition = not use_mtf_confirmation or (mtf_strict ? mtf_direction > 0 : mtf_direction >= 0)
mtf_sell_condition = not use_mtf_confirmation or (mtf_strict ? mtf_direction < 0 : mtf_direction <= 0)

// Order Block Filter
ob_buy_condition = not use_order_blocks or bull_ob_near
ob_sell_condition = not use_order_blocks or bear_ob_near

// Combine All Filters
buy_filter_passed = (not use_volume_filter or volume_condition) and (not use_rsi_filter or rsi_buy_condition) and (not use_macd_filter or macd_buy_condition) and mtf_buy_condition and ob_buy_condition

sell_filter_passed = (not use_volume_filter or volume_condition) and (not use_rsi_filter or rsi_sell_condition) and (not use_macd_filter or macd_sell_condition) and mtf_sell_condition and ob_sell_condition

// Debug info for filters
var string filter_status = ""
filter_status := "Vol:" + (volume_condition ? "✓" : "✗") + " RSI:" + (trend_direction > 0 ? (rsi_buy_condition ? "✓" : "✗") : (rsi_sell_condition ? "✓" : "✗")) + " MACD:" + (trend_direction > 0 ? (macd_buy_condition ? "✓" : "✗") : (macd_sell_condition ? "✓" : "✗")) + " MTF:" + (trend_direction > 0 ? (mtf_buy_condition ? "✓" : "✗") : (mtf_sell_condition ? "✓" : "✗")) + " OB:" + (trend_direction > 0 ? (ob_buy_condition ? "✓" : "✗") : (ob_sell_condition ? "✓" : "✗"))

// --------------------------------------------------------------------------------------------------------------------}
// 𝙏𝙍𝘼𝘿𝙄𝙉𝙂 𝙎𝙄𝙂𝙉𝘼𝙇𝙎
// --------------------------------------------------------------------------------------------------------------------{
// Cloud Retest Signals
// Bullish retest: Price has crossed above the cloud and now retests band1 (touches it and bounces)
bullish_cloud_retest = trend_direction > 0 and close > band and low <= band1 and low[1] > band1[1] and close > open

// Bearish retest: Price has crossed below the cloud and now retests band1 (touches it and bounces down)
bearish_cloud_retest = trend_direction < 0 and close < band and high >= band1 and high[1] < band1[1] and close < open

// Secondary signals (optional)
long_mean_rev = mean_rev_up and take_mean_rev_signals
long_cloud_cross = cloud_cross_up and take_cross_signals
short_mean_rev = mean_rev_dn and take_mean_rev_signals
short_cloud_cross = cloud_cross_dn and take_cross_signals

// Combined signals - prioritizing cloud retest
long_signal = (bullish_cloud_retest or (long_mean_rev or long_cloud_cross) and take_mean_rev_signals) and buy_filter_passed
short_signal = (bearish_cloud_retest or (short_mean_rev or short_cloud_cross) and take_mean_rev_signals) and sell_filter_passed

// Signal status for debugging
var string signal_status = ""
signal_status := "CloudRetest: " + (bullish_cloud_retest or bearish_cloud_retest ? "✓" : "✗") + " MeanRev:" + (long_mean_rev or short_mean_rev ? "✓" : "✗") + " CloudCross:" + (long_cloud_cross or short_cloud_cross ? "✓" : "✗")

// Day trade counter
var int trades_today = 0
if dayofweek != dayofweek[1]  // Reset counter on a new day
    trades_today := 0

// --------------------------------------------------------------------------------------------------------------------}
// 𝙎𝙏𝙍𝘼𝙏𝙀𝙂𝙔 𝙀𝙓𝙀𝘾𝙐𝙏𝙄𝙊𝙉
// --------------------------------------------------------------------------------------------------------------------{
// Entry conditions - focusing mainly on cloud retest signals
longCondition = use_strategy and trades_today < max_trades_per_day and ((take_cloud_retest and bullish_cloud_retest) or (take_mean_rev_signals and long_mean_rev) or (take_cross_signals and long_cloud_cross)) and buy_filter_passed

shortCondition = use_strategy and trades_today < max_trades_per_day
                 and ((take_cloud_retest and bearish_cloud_retest)
                 or (take_mean_rev_signals and short_mean_rev)
                 or (take_cross_signals and short_cloud_cross))
                 and sell_filter_passed

// Apply trend filter if enabled
if only_trade_with_trend
    longCondition := longCondition and trend_direction > 0
    shortCondition := shortCondition and trend_direction < 0

// Trailing stop variables - use 'var' to persist across bars
var float longTrailPrice = na
var float shortTrailPrice = na

// Execute long trades
if longCondition
    strategy.close("Short")  // Close any existing short positions first
    strategy.entry("Long", strategy.long)
    
    if use_sl_tp
        if not use_trailing
            strategy.exit("Long TP/SL", "Long", stop=close - atr_value * sl_mult, limit=close + atr_value * tp_mult)
        else
            strategy.exit("Long TP", "Long", limit=close + atr_value * tp_mult)
            // Initial stop will be set below in the trailing stop section
            longTrailPrice := close - atr_value * sl_mult
    
    trades_today := trades_today + 1

// Execute short trades
if shortCondition
    strategy.close("Long")  // Close any existing long positions first
    strategy.entry("Short", strategy.short)
    
    if use_sl_tp
        if not use_trailing
            strategy.exit("Short TP/SL", "Short", stop=close + atr_value * sl_mult, limit=close - atr_value * tp_mult)
        else
            strategy.exit("Short TP", "Short", limit=close - atr_value * tp_mult)
            // Initial stop will be set below in the trailing stop section
            shortTrailPrice := close + atr_value * sl_mult
    
    trades_today := trades_today + 1

// Implement trailing stop if enabled
if use_trailing and strategy.position_size != 0
    if strategy.position_size > 0  // Long position  
        // Only start trailing after price moved in favor by trigger amount
        if close > strategy.position_avg_price + atr_value * trail_trigger
            // Calculate new trail level
            trailLevel = close - atr_value * trail_step
            
            // Move stop only if it improves the stop level
            if na(longTrailPrice) or trailLevel > longTrailPrice
                longTrailPrice := trailLevel
            
            strategy.exit("Long Trail", "Long", stop=longTrailPrice)
        else if na(longTrailPrice)  // Set initial stop if not yet set
            longTrailPrice := strategy.position_avg_price - atr_value * sl_mult
            strategy.exit("Long Trail", "Long", stop=longTrailPrice)
    
    if strategy.position_size < 0  // Short position
        // Only start trailing after price moved in favor by trigger amount
        if close < strategy.position_avg_price - atr_value * trail_trigger
            // Calculate new trail level
            trailLevel = close + atr_value * trail_step
            
            // Move stop only if it improves the stop level
            if na(shortTrailPrice) or trailLevel < shortTrailPrice
                shortTrailPrice := trailLevel
                
            strategy.exit("Short Trail", "Short", stop=shortTrailPrice)
        else if na(shortTrailPrice)  // Set initial stop if not yet set
            shortTrailPrice := strategy.position_avg_price + atr_value * sl_mult
            strategy.exit("Short Trail", "Short", stop=shortTrailPrice)

// Reset trail prices when position is closed
if strategy.position_size == 0
    longTrailPrice := na
    shortTrailPrice := na

// --------------------------------------------------------------------------------------------------------------------}
// 𝙑𝙄𝙎𝙐𝘼𝙇𝙄𝙕𝘼𝙏𝙄𝙊𝙉
// --------------------------------------------------------------------------------------------------------------------{

// Plot the 'band' value with a line break if there's a cross between 'close' and 'band'
p1 = plot(cross_cb ? na : band,
              title     = "Band",         
              color     = trend_color,          
              linewidth = 2,               
              style     = plot.style_linebr)  

// Plot 'band1', which is based on the shorter lookback period, with a transparent color
p2 = plot(band1, 
             title      = "Band1",           
             color      = color.new(chart.fg_color, 90),  
             linewidth  = 2,                  
             style      = plot.style_linebr)  

// Plot a diamond shape at the 'band' value when there's a cross between 'close' and 'band'
plotshape(cross_cb ? band : na,
             location = location.absolute,  
             style    = shape.diamond,      
             color    = trend_color,              
             size     = size.tiny,         
             offset   = 1)                 

// Fill the area between 'p1' and 'p2' (between 'band' and 'band1') using the gradient color
fill(p1, p2, band1, band, color.new(trend_color, 95), color.new(trend_color, 50), fillgaps = true)

if mean_rev
    drawLabel(mean_rev_dn, label.style_label_down, color.new(trend_color, 100), chart.fg_color, true)
    drawLabel(mean_rev_up, label.style_label_up, color.new(trend_color, 100), chart.fg_color, false)

// Plot downward arrows above the bars for mean reversion down signal
// Pre-compute label conditions
dn_label_cond = mean_rev_dn and mean_rev
up_label_cond = mean_rev_up and mean_rev

// Plot downward arrows above the bars for mean reversion down signal
plotchar(dn_label_cond ? high[1] : na,
         title = "", text = "⬥",
         location = location.absolute,
         color = trend_color,
         size = size.tiny,
         offset = -1)

// Plot upward arrows below the bars for mean reversion up signal
plotchar(up_label_cond ? low[1] : na,
         title = "", text = "⬥",
         location = location.absolute,
         color    = trend_color,             
         size     = size.tiny,
         offset   = -1)         

// Plot cloud retest signals (primary focus)
plotshape(bullish_cloud_retest, title="Cloud Retest Buy", location=location.belowbar, 
         color=color.green, style=shape.triangleup, size=size.normal)
plotshape(bearish_cloud_retest, title="Cloud Retest Sell", location=location.abovebar, 
         color=color.red, style=shape.triangledown, size=size.normal)

// Plot long and short signals
plotshape(long_signal and not bullish_cloud_retest, title="Other Buy Signal", 
         location=location.belowbar, color=color.new(color.green, 50), style=shape.triangleup, size=size.small)
plotshape(short_signal and not bearish_cloud_retest, title="Other Sell Signal", 
         location=location.abovebar, color=color.new(color.red, 50), style=shape.triangledown, size=size.small)

// Highlight cloud retest areas
bgcolor(bullish_cloud_retest ? color.new(color.green, 90) : bearish_cloud_retest ? color.new(color.red, 90) : na, title="Cloud Retest Background")

// Highlight order blocks if enabled
if highlight_order_blocks and use_order_blocks
    for i = 0 to math.min(array.size(bull_ob_price), ob_lookback) - 1
        level = array.get(bull_ob_price, i)
        age = array.get(bull_ob_age, i)
        if not na(level) and age >= ob_min_age and age <= ob_max_age
            line.new(x1 = array.get(bull_ob_bar, i), y1 = level, x2 = bar_index, y2 = level, xloc = xloc.bar_index, color=color.new(color.green, 50), width=2, style=line.style_dashed)
    
    for i = 0 to math.min(array.size(bear_ob_price), ob_lookback) - 1
        level = array.get(bear_ob_price, i)
        age = array.get(bear_ob_age, i)
        if not na(level) and age >= ob_min_age and age <= ob_max_age
            line.new(x1 = array.get(bear_ob_bar, i), y1 = level, x2 = bar_index, y2 = level, xloc = xloc.bar_index, color=color.new(color.red, 50), width=2, style=line.style_dashed)

// Display filter values if enabled
if show_filters
    var label filterLabel = na
    var label signalLabel = na
    var label tradeLabel = na
    var label mtfLabel = na
    var label volLabel = na
    
    label.delete(filterLabel)
    label.delete(signalLabel)
    label.delete(tradeLabel)
    label.delete(mtfLabel)
    label.delete(volLabel)
    
    if barstate.islast
        filterInfo = "Filters: "
                   + (use_volume_filter ? "Vol(" + (volume_condition ? "✓" : "✗") + ") " : "")
                   + (use_rsi_filter ? "RSI:" + str.tostring(math.round(rsi_value))
                   + (use_dynamic_rsi ? "→" + str.tostring(math.round(trend_direction > 0 ? dynamic_oversold : dynamic_overbought)) : "") + " " : "")
                   + (use_macd_filter ? "MACD(" + (macd_line > signal_line ? "↑" : "↓") + ") " : "")
                   + "Trend: " + (trend_direction > 0 ? "Bullish" : "Bearish")
        
        signalInfo = "Signals: "
                   + (take_cloud_retest ? "CloudRetest(" + (bullish_cloud_retest or bearish_cloud_retest ? "✓" : "✗") + ") " : "")
                   + (take_mean_rev_signals ? "MeanRev(" + (mean_rev_up or mean_rev_dn ? "✓" : "✗") + ") " : "")
                   + (take_cross_signals ? "CloudCross(" + (cloud_cross_up or cloud_cross_dn ? "✓" : "✗") + ") " : "")
        
        tradeInfo = "Trading: "
                  + (long_signal ? "BUY ✓" : "BUY ✗") + " | "
                  + (short_signal ? "SELL ✓" : "SELL ✗") + " | "
                  + "Trades Today: " + str.tostring(trades_today) + "/" + str.tostring(max_trades_per_day)
        
        mtfInfo = "MTF: " + (use_mtf_confirmation ? mtf_timeframe + "m "
                  + (mtf_direction > 0 ? "Bullish" : mtf_direction < 0 ? "Bearish" : "Neutral")
                  + (mtf_strict ? " (Strict)" : "") : "Disabled")
                  + (use_order_blocks ? " | OB: " + (bull_ob_near ? "Bull✓" : "Bull✗") + "/" + (bear_ob_near ? "Bear✓" : "Bear✗") : "")
        
        volInfo = "Lookback: " + str.tostring(len) + (lookback_type == "Volatility-Adaptive" ? " (Adaptive)" : " (Fixed)") + " | Vol: " + str.tostring(math.round(vol_percent, 2)) + "%" + " | " + (use_trailing ? "Trailing" + (strategy.position_size != 0 ? (strategy.position_size > 0 ? (not na(longTrailPrice) ? " @ " + str.tostring(math.round(longTrailPrice, 2)) : " Waiting") : (not na(shortTrailPrice) ? " @ " + str.tostring(math.round(shortTrailPrice, 2)) : " Waiting")) : "") : "Fixed TP/SL")
        
        filterLabel := label.new(bar_index, high, filterInfo, style=label.style_label_down, 
                             color=color.new(chart.bg_color, 15), textcolor=chart.fg_color)
        
        signalLabel := label.new(bar_index, high + (high * 0.01), signalInfo, style=label.style_label_down, 
                             color=color.new(chart.bg_color, 15), textcolor=chart.fg_color)
        
        tradeLabel := label.new(bar_index, high + (high * 0.02), tradeInfo, style=label.style_label_down, 
                             color=color.new(chart.bg_color, 15), textcolor=chart.fg_color)
                             
        if show_mtf_info
            mtfLabel := label.new(bar_index, high + (high * 0.03), mtfInfo, style=label.style_label_down, 
                             color=color.new(chart.bg_color, 15), textcolor=chart.fg_color)
        
        if show_debug_info
            volLabel := label.new(bar_index, high + (high * 0.04), volInfo, style=label.style_label_down, 
                             color=color.new(chart.bg_color, 15), textcolor=chart.fg_color)

// --------------------------------------------------------------------------------------------------------------------}